---
import Phonetic from "@/components/audio/phonetic.svelte"
import Phrase from "@/components/audio/phrase.svelte"
import Word from "@/components/audio/word.svelte"
import BaseLayout from "@/layouts/base-layout.astro"
import { MarkdownInstance } from "astro"
import path from "node:path"
import TextToIPA from "text-to-ipa"
import { english2ipa } from "@/data/dictionary-en"
import CardLayout from "@/components/layout/card-layout.svelte"

type Word = {
  en: string
  ja: string
  past?: string
}

interface Props {
  note: MarkdownInstance<{
    title: string
    sentence: string
    words: { [w in string]: string | Omit<Word, "en"> }[]
    phonetic?: boolean
  }>
}

export async function getStaticPaths() {
  const notes = await Astro.glob("@/contents/**/*.mdx")

  return notes.map(note => {
    const filepath = note.file
    const segments = filepath.split("/")
    const rootIdx = segments.findIndex(seg => seg === "contents")
    const slugs = segments
      .slice(rootIdx + 1)
      .map(slug => path.basename(slug, ".mdx"))
    return {
      params: {
        sections:
          slugs[0] === "private" ? slugs.slice(1).join("/") : slugs.join("/"),
      },
      props: { note },
    }
  })
}

const { note } = Astro.props
const { frontmatter, Content } = note
const { sentence = "", words: _words = [], phonetic = false } = frontmatter

const words: Word[] = _words.map(word => {
  const [en] = Object.keys(word)
  const [info] = Object.values(word)
  if (typeof info === "string") {
    return { en, ja: info }
  }
  return { en, ...info }
})

const phrases = sentence.split("\n").map(str => {
  const _ja = str.match(/<ja>(.*)<\/ja>/)
  const ja = _ja ? _ja[1] : ""
  const en = str.replace(`<ja>${ja}</ja>`, "")
  return { ja, en }
})

const phoneticWords = phonetic
  ? phrases.map(r => {
      return r.en
        .split(" ")
        .map(_w => {
          const w = _w
            .toLowerCase()
            .replaceAll(",", "")
            .replaceAll("…", "")
            .replaceAll("“", "")
            .replaceAll("”", "")
          const ipa: string = english2ipa[w]
          if (ipa !== undefined) return ipa
          const ph: string = TextToIPA.lookup(w.toLowerCase()).text
          return ph.includes("OR")
            ? `[${ph.replaceAll("OR", "||")}]`
            : `{${ph}}`
        })
        .join(" ")
    })
  : []
---

<BaseLayout frontmatter={frontmatter}>
  <div class="root">
    <div class="main">
      <div>
        {
          phrases.map(({ en, ja }, i) =>
            en.length > 0 ? (
              <Phrase
                client:load
                en={en}
                ja={ja}
                phonetics={phoneticWords[i]}
              />
            ) : (
              <br />
            ),
          )
        }
      </div>
      <Content />
      <CardLayout>
        {words.map(word => <Word client:load word={word} />)}
      </CardLayout>
    </div>
    <div class="side">
      <Phonetic client:load />
    </div>
  </div>
</BaseLayout>

<style>
  .root {
    display: flex;
  }
  .main {
    width: calc(100vw - 400px);
    padding-right: 5rem;
  }
  .side {
    width: 25rem;
    height: 100vh;
    overflow-y: auto;
    margin-right: -20px;
    padding-right: 20px;
    padding-top: 1rem;
    padding-bottom: 1rem;
    position: fixed;
    right: 0;
    top: 0;
  }
</style>
